{"ast":null,"code":"import { BEGIN_DRAG, DROP, END_DRAG, HOVER, PUBLISH_DRAG_SOURCE } from '../actions/dragDrop/index.js';\nimport { ADD_SOURCE, ADD_TARGET, REMOVE_SOURCE, REMOVE_TARGET } from '../actions/registry.js';\nimport { ALL, NONE } from '../utils/dirtiness.js';\nimport { areArraysEqual } from '../utils/equality.js';\nimport { xor } from '../utils/js_utils.js';\nexport function reduce(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_state = NONE, action) {\n  switch (action.type) {\n    case HOVER:\n      break;\n    case ADD_SOURCE:\n    case ADD_TARGET:\n    case REMOVE_TARGET:\n    case REMOVE_SOURCE:\n      return NONE;\n    case BEGIN_DRAG:\n    case PUBLISH_DRAG_SOURCE:\n    case END_DRAG:\n    case DROP:\n    default:\n      return ALL;\n  }\n  const {\n    targetIds = [],\n    prevTargetIds = []\n  } = action.payload;\n  const result = xor(targetIds, prevTargetIds);\n  const didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);\n  if (!didChange) {\n    return NONE;\n  }\n  // Check the target ids at the innermost position. If they are valid, add them\n  // to the result\n  const prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];\n  const innermostTargetId = targetIds[targetIds.length - 1];\n  if (prevInnermostTargetId !== innermostTargetId) {\n    if (prevInnermostTargetId) {\n      result.push(prevInnermostTargetId);\n    }\n    if (innermostTargetId) {\n      result.push(innermostTargetId);\n    }\n  }\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}