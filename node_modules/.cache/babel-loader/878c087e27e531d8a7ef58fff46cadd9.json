{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\GitHub\\\\assignment-3-mikeycody5\\\\src\\\\components\\\\timers\\\\Tabata.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport DisplayTime from \"../timers/shared/DisplayTime.js\";\nimport Input from \"../timers/shared/input.js\";\nimport ProgressBar from \"../timers/shared/ProgressBar.js\";\nimport DisplayRounds from \"../timers/shared/DisplayRounds\";\nimport { GlobalContext } from \"../../App.js\";\nconst Tabata = props => {\n  const rounds = props.rounds;\n  const index = props.index;\n  const initialTime = (props.minutes * 60 + props.seconds) * 1000;\n  const [time, setTime] = useState(initialTime);\n  const [running, setRunning] = useState(false);\n  const [currentRound, setCurrentRound] = useState(1);\n  const [isResting, setIsResting] = useState(false);\n  const [, setProgress] = useState(0);\n  const {\n    setActiveIndex,\n    activeIndex,\n    timers,\n    setTimers,\n    timerIsRunning\n  } = useContext(GlobalContext);\n  const isActive = props.index === activeIndex;\n  const calculateProgress = () => {\n    if (isResting) {\n      return time / initialTime * 100;\n    } else {\n      return (initialTime - time) / initialTime * 100;\n    }\n  };\n  useEffect(() => {\n    let interval;\n    if (isActive && time > 0 && timerIsRunning) {\n      interval = setInterval(() => {\n        setTime(prevTime => Math.max(0, prevTime - 1000));\n        if (isResting) {\n          const remainingTime = time / initialTime;\n          setProgress(1000 - remainingTime * 1000);\n        }\n      }, 1000);\n    } else if (isActive && time === 0) {\n      console.log({\n        index,\n        activeIndex\n      });\n      clearInterval(interval);\n      if (isResting) {\n        setIsResting(false);\n        setCurrentRound(prevRound => prevRound + 1);\n        setTime(initialTime);\n        setRunning(true);\n        setProgress(0);\n      } else {\n        setIsResting(true);\n        setTime(initialTime);\n        setRunning(true);\n      }\n      if (currentRound >= rounds) {\n        setActiveIndex(index + 1);\n        setCurrentRound(1);\n        setIsResting(false);\n        setTime(0);\n        setRunning(false);\n        setProgress(0);\n      }\n    } else {\n      console.log({\n        index,\n        activeIndex\n      });\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [running, time, isResting, initialTime, currentRound, rounds, activeIndex, setActiveIndex]);\n  const handleSetMinutes = mins => {\n    const timerToEdit = timers[props.index];\n    const updatedTimer = {\n      ...timerToEdit,\n      minutes: mins\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(props.index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n  const handleSetSeconds = secs => {\n    const timerToEdit = timers[props.index];\n    const updatedTimer = {\n      ...timerToEdit,\n      seconds: secs\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(props.index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n  const handleSetRounds = rnds => {\n    const timerToEdit = timers[index];\n    const updatedTimer = {\n      ...timerToEdit,\n      rounds: rnds\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DisplayRounds, {\n    currentRound: currentRound,\n    initialRounds: props.rounds,\n    onRoundsChange: handleSetRounds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    minutes: props.minutes,\n    setMinutes: handleSetMinutes,\n    seconds: props.seconds,\n    setSeconds: handleSetSeconds,\n    disabled: running,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"display-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, isResting ? /*#__PURE__*/React.createElement(ProgressBar, {\n    value: calculateProgress(),\n    max: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(DisplayTime, {\n    time: time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  })));\n};\nexport default Tabata;","map":{"version":3,"names":["React","useState","useEffect","useContext","DisplayTime","Input","ProgressBar","DisplayRounds","GlobalContext","Tabata","props","rounds","index","initialTime","minutes","seconds","time","setTime","running","setRunning","currentRound","setCurrentRound","isResting","setIsResting","setProgress","setActiveIndex","activeIndex","timers","setTimers","timerIsRunning","isActive","calculateProgress","interval","setInterval","prevTime","Math","max","remainingTime","console","log","clearInterval","prevRound","handleSetMinutes","mins","timerToEdit","updatedTimer","timersCopy","splice","handleSetSeconds","secs","handleSetRounds","rnds","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","initialRounds","onRoundsChange","setMinutes","setSeconds","disabled","value"],"sources":["C:/Desktop/GitHub/assignment-3-mikeycody5/src/components/timers/Tabata.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport DisplayTime from \"../timers/shared/DisplayTime.js\";\nimport Input from \"../timers/shared/input.js\";\nimport ProgressBar from \"../timers/shared/ProgressBar.js\";\nimport DisplayRounds from \"../timers/shared/DisplayRounds\";\nimport { GlobalContext } from \"../../App.js\";\n\nconst Tabata = (props) => {\n  const rounds = props.rounds;\n  const index = props.index;\n  const initialTime = (props.minutes * 60 + props.seconds) * 1000;\n\n  const [time, setTime] = useState(initialTime);\n\n  const [running, setRunning] = useState(false);\n  const [currentRound, setCurrentRound] = useState(1);\n  const [isResting, setIsResting] = useState(false);\n  const [, setProgress] = useState(0);\n\n  const {\n    setActiveIndex,\n    activeIndex,\n    timers,\n    setTimers,\n    timerIsRunning,\n  } = useContext(GlobalContext);\n  const isActive = props.index === activeIndex;\n\n\n  const calculateProgress = () => {\n    if (isResting) {\n      return (time / initialTime) * 100;\n    } else {\n      return ((initialTime - time) / initialTime) * 100;\n    }\n  };\n\n  useEffect(() => {\n    let interval;\n  \n    if (isActive && time > 0 && timerIsRunning) {\n      interval = setInterval(() => {\n        setTime((prevTime) => Math.max(0, prevTime - 1000));\n        \n        if (isResting) {\n          const remainingTime = time / initialTime;\n          setProgress(1000 - remainingTime * 1000);\n        }\n      }, 1000);\n    } else if (isActive && time === 0) {\n      console.log({ index, activeIndex });\n      clearInterval(interval);\n      if (isResting) {\n        setIsResting(false);\n        setCurrentRound((prevRound) => prevRound + 1);\n        setTime(initialTime);\n        setRunning(true);\n        setProgress(0); \n      } else {\n        setIsResting(true);\n        setTime(initialTime);\n        setRunning(true);\n      }\n  \n      if (currentRound >= rounds) {\n        setActiveIndex(index + 1);\n        setCurrentRound(1);\n        setIsResting(false);\n        setTime(0);\n        setRunning(false);\n        setProgress(0); \n      }\n    } else {\n      console.log({ index, activeIndex });\n      clearInterval(interval);\n    }\n  \n    return () => clearInterval(interval);\n  }, [running, time, isResting, initialTime, currentRound, rounds, activeIndex, setActiveIndex,]);\n  \n\n  \n  const handleSetMinutes = (mins) => {\n    const timerToEdit = timers[props.index];\n    const updatedTimer = {\n      ...timerToEdit,\n      minutes: mins,\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(props.index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n\n  const handleSetSeconds = (secs) => {\n    const timerToEdit = timers[props.index];\n    const updatedTimer = {\n      ...timerToEdit,\n      seconds: secs,\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(props.index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n\n  const handleSetRounds = (rnds) => {\n    const timerToEdit = timers[index];\n    const updatedTimer = {\n      ...timerToEdit,\n      rounds: rnds,\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n\n  return (\n    <div className=\"timer\">\n      <DisplayRounds\n        currentRound={currentRound}\n        initialRounds={props.rounds}\n        onRoundsChange={handleSetRounds}\n      />\n      <Input\n        minutes={props.minutes}\n        setMinutes={handleSetMinutes}\n        seconds={props.seconds}\n        setSeconds={handleSetSeconds}\n        disabled={running}\n      />\n      <div className=\"display-time\">\n        {isResting ? (\n          \n          <ProgressBar value={calculateProgress()} max=\"100\" />\n        ) : (\n          <DisplayTime time={time} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Tabata;"],"mappings":"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"},"metadata":{},"sourceType":"module"}