{"ast":null,"code":"export class NativeDragSource {\n  initializeExposedProperties() {\n    Object.keys(this.config.exposeProperties).forEach(property => {\n      Object.defineProperty(this.item, property, {\n        configurable: true,\n        enumerable: true,\n        get() {\n          // eslint-disable-next-line no-console\n          console.warn(`Browser doesn't allow reading \"${property}\" until the drop event.`);\n          return null;\n        }\n      });\n    });\n  }\n  loadDataTransfer(dataTransfer) {\n    if (dataTransfer) {\n      const newProperties = {};\n      Object.keys(this.config.exposeProperties).forEach(property => {\n        const propertyFn = this.config.exposeProperties[property];\n        if (propertyFn != null) {\n          newProperties[property] = {\n            value: propertyFn(dataTransfer, this.config.matchesTypes),\n            configurable: true,\n            enumerable: true\n          };\n        }\n      });\n      Object.defineProperties(this.item, newProperties);\n    }\n  }\n  canDrag() {\n    return true;\n  }\n  beginDrag() {\n    return this.item;\n  }\n  isDragging(monitor, handle) {\n    return handle === monitor.getSourceId();\n  }\n  endDrag() {\n    // empty\n  }\n  constructor(config) {\n    this.config = config;\n    this.item = {};\n    this.initializeExposedProperties();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}