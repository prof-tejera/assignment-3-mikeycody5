{"ast":null,"code":"export class MonotonicInterpolant {\n  interpolate(x) {\n    const {\n      xs,\n      ys,\n      c1s,\n      c2s,\n      c3s\n    } = this;\n    // The rightmost point in the dataset should give an exact result\n    let i = xs.length - 1;\n    if (x === xs[i]) {\n      return ys[i];\n    }\n    // Search for the interval x is in, returning the corresponding y if x is one of the original xs\n    let low = 0;\n    let high = c3s.length - 1;\n    let mid;\n    while (low <= high) {\n      mid = Math.floor(0.5 * (low + high));\n      const xHere = xs[mid];\n      if (xHere < x) {\n        low = mid + 1;\n      } else if (xHere > x) {\n        high = mid - 1;\n      } else {\n        return ys[mid];\n      }\n    }\n    i = Math.max(0, high);\n    // Interpolate\n    const diff = x - xs[i];\n    const diffSq = diff * diff;\n    return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;\n  }\n  constructor(xs, ys) {\n    const {\n      length\n    } = xs;\n    // Rearrange xs and ys so that xs is sorted\n    const indexes = [];\n    for (let i = 0; i < length; i++) {\n      indexes.push(i);\n    }\n    indexes.sort((a, b) => xs[a] < xs[b] ? -1 : 1);\n    // Get consecutive differences and slopes\n    const dys = [];\n    const dxs = [];\n    const ms = [];\n    let dx;\n    let dy;\n    for (let i1 = 0; i1 < length - 1; i1++) {\n      dx = xs[i1 + 1] - xs[i1];\n      dy = ys[i1 + 1] - ys[i1];\n      dxs.push(dx);\n      dys.push(dy);\n      ms.push(dy / dx);\n    }\n    // Get degree-1 coefficients\n    const c1s = [ms[0]];\n    for (let i2 = 0; i2 < dxs.length - 1; i2++) {\n      const m2 = ms[i2];\n      const mNext = ms[i2 + 1];\n      if (m2 * mNext <= 0) {\n        c1s.push(0);\n      } else {\n        dx = dxs[i2];\n        const dxNext = dxs[i2 + 1];\n        const common = dx + dxNext;\n        c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));\n      }\n    }\n    c1s.push(ms[ms.length - 1]);\n    // Get degree-2 and degree-3 coefficients\n    const c2s = [];\n    const c3s = [];\n    let m;\n    for (let i3 = 0; i3 < c1s.length - 1; i3++) {\n      m = ms[i3];\n      const c1 = c1s[i3];\n      const invDx = 1 / dxs[i3];\n      const common = c1 + c1s[i3 + 1] - m - m;\n      c2s.push((m - c1 - common) * invDx);\n      c3s.push(common * invDx * invDx);\n    }\n    this.xs = xs;\n    this.ys = ys;\n    this.c1s = c1s;\n    this.c2s = c2s;\n    this.c3s = c3s;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}