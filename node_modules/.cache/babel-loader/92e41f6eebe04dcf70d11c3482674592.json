{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\GitHub\\\\assignment-3-mikeycody5\\\\src\\\\components\\\\timers\\\\Stopwatch.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport DisplayTime from \"../timers/shared/DisplayTime.js\";\nimport Input from \"../timers/shared/input.js\";\nimport { GlobalContext } from \"../../App.js\";\nconst Stopwatch = props => {\n  const [time, setTime] = useState((props.minutes * 60 + props.seconds) * 1000);\n  const {\n    activeIndex,\n    setActiveIndex,\n    timerIsRunning,\n    timers,\n    setTimers,\n    index\n  } = useContext(GlobalContext);\n  const isActive = props.index === activeIndex;\n  useEffect(() => {\n    let interval;\n    if (isActive && timerIsRunning) {\n      interval = setInterval(() => {\n        setTime(prevTime => {\n          const newTime = prevTime + 1000;\n          if (newTime >= (props.minutes * 60 + props.seconds) * 1000) {\n            console.log({\n              index,\n              activeIndex\n            });\n            setActiveIndex(props.index + 1);\n            clearInterval(interval);\n          }\n          return newTime;\n        });\n      }, 1000);\n    } else {\n      clearInterval(interval);\n      if (!isActive) {\n        setTime(0);\n      }\n    }\n    return () => clearInterval(interval);\n  }, [isActive, index, activeIndex, timerIsRunning, props.index, props.minutes, props.seconds, setActiveIndex]);\n  useEffect(() => {\n    const saveTimerToLocalStorage = () => {\n      const timerToSave = {\n        componentType: \"STOPWATCH\",\n        minutes: props.minutes,\n        seconds: props.seconds\n      };\n      const timersCopy = [...timers];\n      timersCopy.splice(index, 1, timerToSave);\n      localStorage.setItem(\"timers\", JSON.stringify(timersCopy));\n    };\n    const intervalId = setInterval(() => {\n      saveTimerToLocalStorage();\n    }, 5000);\n    return () => clearInterval(intervalId);\n  }, [timers, index, props.minutes, props.seconds]);\n  const handleSetMinutes = mins => {\n    const timerToEdit = timers[props.index];\n    const updatedTimer = {\n      ...timerToEdit,\n      minutes: mins\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(props.index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n  const handleSetSeconds = secs => {\n    const timerToEdit = timers[props.index];\n    const updatedTimer = {\n      ...timerToEdit,\n      seconds: secs\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(props.index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stopwatch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    minutes: props.minutes,\n    setMinutes: handleSetMinutes,\n    seconds: props.seconds,\n    setSeconds: handleSetSeconds,\n    disabled: isActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DisplayTime, {\n    time: time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Stopwatch;","map":{"version":3,"names":["React","useState","useEffect","useContext","DisplayTime","Input","GlobalContext","Stopwatch","props","time","setTime","minutes","seconds","activeIndex","setActiveIndex","timerIsRunning","timers","setTimers","index","isActive","interval","setInterval","prevTime","newTime","console","log","clearInterval","saveTimerToLocalStorage","timerToSave","componentType","timersCopy","splice","localStorage","setItem","JSON","stringify","intervalId","handleSetMinutes","mins","timerToEdit","updatedTimer","handleSetSeconds","secs","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","setMinutes","setSeconds","disabled"],"sources":["C:/Desktop/GitHub/assignment-3-mikeycody5/src/components/timers/Stopwatch.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport DisplayTime from \"../timers/shared/DisplayTime.js\";\nimport Input from \"../timers/shared/input.js\";\nimport { GlobalContext } from \"../../App.js\";\n\n\nconst Stopwatch = (props) => {\n  const [time, setTime] = useState((props.minutes * 60 + props.seconds) * 1000);\n  const {\n    activeIndex,\n    setActiveIndex,\n    timerIsRunning,\n    timers, \n    setTimers,\n    index,\n  } = useContext(GlobalContext);\n  const isActive = props.index === activeIndex;\n\n  useEffect(() => {\n    let interval;\n  \n    if (isActive && timerIsRunning) {\n      interval = setInterval(() => {\n        setTime((prevTime) => {\n          const newTime = prevTime + 1000;\n          if (newTime >= (props.minutes * 60 + props.seconds) * 1000) {\n            console.log({ index, activeIndex });\n            setActiveIndex(props.index + 1);\n            clearInterval(interval);\n          }\n  \n          return newTime;\n        });\n      }, 1000);\n    } else {\n      clearInterval(interval);\n      if (!isActive) {\n        setTime(0);\n      }\n    }\n  \n    return () => clearInterval(interval);\n  }, [isActive, index, activeIndex, timerIsRunning, props.index, props.minutes, props.seconds, setActiveIndex]);\n  \n  useEffect(() => {\n    const saveTimerToLocalStorage = () => {\n      const timerToSave = {\n        componentType: \"STOPWATCH\",\n        minutes: props.minutes,\n        seconds: props.seconds,\n      };\n      const timersCopy = [...timers];\n      timersCopy.splice(index, 1, timerToSave);\n      localStorage.setItem(\"timers\", JSON.stringify(timersCopy));\n    };\n\n    const intervalId = setInterval(() => {\n      saveTimerToLocalStorage();\n    }, 5000); \n\n    return () => clearInterval(intervalId); \n  }, [timers, index, props.minutes, props.seconds]);\n\n  const handleSetMinutes = (mins) => {\n    const timerToEdit = timers[props.index];\n    const updatedTimer = {\n      ...timerToEdit,\n      minutes: mins,\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(props.index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n\n  const handleSetSeconds = (secs) => {\n    const timerToEdit = timers[props.index];\n    const updatedTimer = {\n      ...timerToEdit,\n      seconds: secs,\n    };\n    const timersCopy = [...timers];\n    timersCopy.splice(props.index, 1, updatedTimer);\n    setTimers(timersCopy);\n  };\n\n\n\n  return (\n    <div className=\"stopwatch\">\n      <Input\n        minutes={props.minutes}\n        setMinutes={handleSetMinutes}\n        seconds={props.seconds}\n        setSeconds={handleSetSeconds}\n        disabled={isActive}\n      />\n      <DisplayTime time={time} />\n    </div>\n  );\n};\n\nexport default Stopwatch;"],"mappings":"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"},"metadata":{},"sourceType":"module"}